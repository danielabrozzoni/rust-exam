{
    "questions": [
        {
            "question": "Does the following code compile ?",
            "code": "let variable: (mut &str, u32) = (\"hello\", 65000);",
            "a": "Yes",
            "b": "No, 65000 is too high for the u32 type",
            "c": "No, 'hello' is not of the type &str",
            "d": "No, it is not possible to have mut before the type in a tuple",
            "answer": "d"
        },
        {
            "question": "Does the following code compile ? (other_variable = 10)",
            "code": "let var = if other_variable == 5 {10};",
            "a": "Yes",
            "b": "No, it is impossible to determine the type of var",
            "c": "No, it is forbidden to write if statements this way",
            "d": "No, the return keyword is missing before the 10",
            "answer": "c"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let array = [10; 20];",
            "a": "Yes, it creates an array of 10 elements with the value 20",
            "b": "Yes, it creates an array of 20 elements with the value 10",
            "c": "Yes, it creates an array with two items 10 and 20",
            "d": "No, the data type of the array items must be specified",
            "answer": "b"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let array = [10, 20, 30, 40, 50]; \nlet my_slice = &array[2..4]; \nprintln(\"{}\", my_slice[2]);",
            "a": "Yes, it compiles and it runs correctly",
            "b": "Yes, it compiles but there is an out of bounds error during the execution",
            "c": "No, the syntax .. doesn't exist in Rust",
            "d": "No, the 'array' variable name is forbidden",
            "answer": "b"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let vs = vec![1, 2, 3]; \nfor v in vs {println!(\"{}\", v);} \nprintln!(\"{}\", vs[0]);",
            "a": "Yes, it compiles and it displays 1 2 3 1",
            "b": "Yes, it compiles and it displays 1 2 3",
            "c": "Yes, it compiles and it displays 1 2 3 and generates an index out of bounds error",
            "d": "No",
            "answer": "d"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let vs = vec![1, 2, 3]; \nfor v in &vs {println!(\"{}\", v);} \nprintln!(\"{}\", vs[0]);",
            "a": "Yes, it compiles and it displays 1 2 3 1",
            "b": "Yes, it compiles and it displays 1 2 3",
            "c": "Yes, it compiles and it displays 1 2 3 and generates an index out of bounds error",
            "d": "No",
            "answer": "a"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let vs = vec![1, 2, 3]; \nfor v in &mut vs {println!(\"{}\", v);} \nprintln!(\"{}\", vs[0]);",
            "a": "Yes, it compiles and it displays 1 2 3 1",
            "b": "Yes, it compiles and it displays 1 2 3",
            "c": "Yes, it compiles and it displays 1 2 3 and generates an index out of bounds error",
            "d": "No",
            "answer": "d"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let mut vs = vec![1, 2, 3]; \nfor v in &mut vs {println!(\"{}\", v);} \nprintln!(\"{}\", vs[0]);",
            "a": "Yes, it compiles and it displays 1 2 3 1",
            "b": "Yes, it compiles and it displays 1 2 3",
            "c": "Yes, it compiles and it displays 1 2 3 and generates an index out of bounds error",
            "d": "No",
            "answer": "a"
        },
        {
            "question": "Is the following code a `binding` in Rust and what is the most correct definition of a `binding` ?",
            "code": "let (a, b) = (5, 10);",
            "a": "The example code is a binding, it binds some values to names, the left-side is called a `pattern`.",
            "b": "The example code is a binding, it is used to declare variables.",
            "c": "The example code is not a binding, it binds some values to names, the left-side is called a `pattern`.",
            "d": "The example code is not a binding, it is used to declare variables.",
            "answer": "a"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let x = 50;",
            "a": "No, the type is not specified",
            "b": "No, the `mut` keyword is missing",
            "c": "Yes, the type of x is u8",
            "d": "Yes, the type of x is i32",
            "answer": "d"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let x = \"hello\";",
            "a": "No, the type is not specified",
            "b": "No, the `mut` keyword is missing",
            "c": "Yes, the type of x is &str",
            "d": "Yes, the type of x is String",
            "answer": "c"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let x: u32; \nprintln(\"{}\", x);",
            "a": "No",
            "b": "Yes, the displayed value is undefined because x was not initialized",
            "c": "Yes, the displayed value is 0",
            "d": "Yes, but the code panics during the x variable creation",
            "answer": "a"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let x: u32 = 0; \nlet x = 15; \nprintln(\"{}\", x);",
            "a": "No, it is not possible to declare two variables with the same name",
            "b": "No, the type of the second variable declaration is not specified",
            "c": "Yes, the displayed value is 0",
            "d": "Yes, the displayed value is 15",
            "answer": "d"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let x = 10; \n{\nlet x = 20; \nprintln!(\"{}\", x);\n} \nprintln!(\"{}\", x);",
            "a": "No, the same variable is declared two times",
            "b": "No, it is not allowed to declare a block without condition, function or loop instruction",
            "c": "Yes, the displayed content is 20 and 10",
            "d": "Yes, the displayed content is 20 and 20",
            "answer": "c"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let mut x = 0; \nx = 10; \nlet x = 20; \nx = 30; \nprintln!(\"{}\", x);",
            "a": "No",
            "b": "Yes, it displays 30",
            "c": "Yes, it displays 20",
            "d": "Yes, it displays 10",
            "answer": "a"
        },
        {
            "question": "Does the following code compile ?",
            "code": "fn function(mut x: u32) {\n x += 1; \nprintln(\"{}\", x);\n}\nfn main() {\nlet x = 0;\nfunction(x);\nprintln!(\"{}\", x);\n}",
            "a": "No",
            "b": "Yes, it displays 1 and 1",
            "c": "Yes, it displays 0 and 0",
            "d": "Yes, it displays 1 and 0",
            "answer": "d"
        },
        {
            "question": "Does the following code compile ?",
            "code": "fn function(x: u32) {\n x += 1; \nprintln(\"{}\", x);\n}\nfn main() {\nlet mut x = 0;\nfunction(x);\nprintln!(\"{}\", x);\n}",
            "a": "No",
            "b": "Yes, it displays 1 and 1",
            "c": "Yes, it displays 0 and 0",
            "d": "Yes, it displays 1 and 0",
            "answer": "a"
        },
        {
            "question": "Does the following code compile ?",
            "code": "fn get_value(x: u32) {\nx + 5\n}\n\nfn main() {\nprintln!(\"{}\", get_value(10));\n}",
            "a": "Yes",
            "b": "No, the x argument of the function get_value is not mutable",
            "c": "No, the semicolon is missing after x + 5",
            "d": "No, the returned value of get_value cannot be a parameter of the println! macro",
            "answer": "a"
        },
        {
            "question": "What means a `-> !` return type ?",
            "a": "The function returns nothing",
            "b": "The function never returns",
            "c": "The function may return different data types",
            "d": "The function accepts unsafe code",
            "answer": "b"
        },
        {
            "question": "Does the following code compile ?",
            "code": "fn my_sum(x: u8, y: u8) -> u8 {\nx + y\n}\n\nfn main() {\nlet function: fn(u8, u8) -> u32 = my_sum;\nprintln!(\"{}\", function(10, 10));\n}",
            "a": "No, the function return type does not match with the expected one",
            "b": "No, pointers to functions do not exist in Rust",
            "c": "No, 10 is too large for the u8 type",
            "d": "Yes",
            "answer": "a"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let tuple: (u32, f64) = (10, 10);",
            "a": "Yes and it runs without any error",
            "b": "Yes and it displays an error when trying to cast an integer into a float",
            "c": "Yes and it displays a warning during the compilation",
            "d": "No",
            "answer": "d"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let array = vec![1, 2, 3, 4, 5];\n\nfor i in 0..10 {\n\nmatch array.get(i) {\nSome(n) => println(\"{}\", n),\nNone => println(\"X\")\n};}",
            "a": "No, get() returns an integer, not an Option",
            "b": "No, i can be greater than 4 which exceeds the vector size",
            "c": "Yes, it displays 1 2 3 4 5 X X X X X",
            "d": "Yes, it displays 1 2 3 4 5 X X X X",
            "answer": "c"
        },
        {
            "question": "How is removed the vector from the heap memory ?",
            "code": "fn main(){\nlet array = vec![10, 20, 30];\n}",
            "a": "The vector is not allocated on the heap",
            "b": "The pointer to the vector is removed from the stack, the heap content is not deleted",
            "c": "Both of the pointer to the vector on the stack and the heap contant are deleted",
            "d": "A garbage collector has to be manually executed to remove the heap content",
            "answer": "c"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let array = vec![10, 20, 30];\nlet other = array;\nprintln!(\"{}\", array[0]);",
            "a": "Yes, the displayed content is 10",
            "b": "Yes, the displayed content is 0",
            "c": "Yes, the displayed content is undefined",
            "d": "No",
            "answer": "d"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let x: u32 = 100;\nlet mut y: u32 = x;\ny += 10;\nprintln!(\"{} {}\", x, y);",
            "a": "Yes, the displayed content is 100 110",
            "b": "Yes, the displayed content is 110 110",
            "c": "No, the x variable does not have any ownership anymore when println!()",
            "d": "No, the y variable cannot be modified",
            "answer": "c"
        },
        {
            "question": "Does the following code compile ?",
            "code": "fn function(array: Vec<u32>) {\nprintln!(\"{}\", array[0]);\n}\n\nfn main() {\nlet array = vec![10, 20, 30];\nfunction(array);\nprintln!(\"{}\", array[0]);\n}",
            "a": "No, the call to function() takes the ownership from the array declared into the main()",
            "b": "No, function() is not allowed to get a parameter that is not a reference",
            "c": "Yes, the displayed content is 10 10",
            "d": "Yes, the displayed content is 10 0",
            "answer": "a"
        },
        {
            "question": "Does the following code compile ?",
            "code": "fn function(array: &Vec<u32>) {\nprintln!(\"{}\", array[0]);\n}\n\nfn main() {\nlet array = vec![10, 20, 30];\nfunction(array);\nprintln!(\"{}\", array[0]);\n}",
            "a": "No, the call to function() takes the ownership from the array declared into the main()",
            "b": "No, function() is not allowed to get a parameter that is not a reference",
            "c": "Yes, the displayed content is 10 10",
            "d": "Yes, the displayed content is 10 0",
            "answer": "b"
        },
        {
            "question": "Does the following code compile ?",
            "code": "fn function(array: &Vec<u32>) {\nprintln!(\"{}\", array[0]);\n}\n\nfn main() {\nlet array = vec![10, 20, 30];\nfunction(&array);\nprintln!(\"{}\", array[0]);\n}",
            "a": "No, the call to function() takes the ownership from the array declared into the main()",
            "b": "No, function() is not allowed to get a parameter that is not a reference",
            "c": "Yes, the displayed content is 10 10",
            "d": "Yes, the displayed content is 10 0",
            "answer": "c"
        },
        {
            "question": "Does the following code compile ?",
            "code": "fn function(array: &mut Vec<u32>) {\narray[0] = 100;\n}\n\nfn main() {\nlet mut array = vec![10, 20, 30];\nfunction(&mut array);\nprintln!(\"{}\", array[0]);\n}",
            "a": "No, the array parameter into the function() is not mutable",
            "b": "No, the given parameter to the function() when calling is not a mutable reference",
            "c": "No, the array variable declared in main() is not mutable",
            "d": "Yes",
            "answer": "d"
        }
    ]
}
