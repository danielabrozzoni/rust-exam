{
    "questions": [
        {
            "question": "Does the following code compile ?",
            "code": "let variable: (mut &str, u32) = (\"hello\", 65000);",
            "a": "Yes",
            "b": "No, 65000 is too high for the u32 type",
            "c": "No, 'hello' is not of the type &str",
            "d": "No, it is not possible to have mut before the type in a tuple",
            "answer": "d"
        },
        {
            "question": "Does the following code compile ? (other_variable = 10)",
            "code": "let var = if other_variable == 5 {10};",
            "a": "Yes",
            "b": "No, it is impossible to determine the type of var",
            "c": "No, it is forbidden to write if statements this way",
            "d": "No, the return keyword is missing before the 10",
            "answer": "c"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let array = [10; 20];",
            "a": "Yes, it creates an array of 10 elements with the value 20",
            "b": "Yes, it creates an array of 20 elements with the value 10",
            "c": "Yes, it creates an array with two items 10 and 20",
            "d": "No, the data type of the array items must be specified",
            "answer": "b"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let array = [10, 20, 30, 40, 50]; \nlet my_slice = &array[2..4]; \nprintln(\"{}\", my_slice[2]);",
            "a": "Yes, it compiles and it runs correctly",
            "b": "Yes, it compiles but there is an out of bounds error during the execution",
            "c": "No, the syntax .. doesn't exist in Rust",
            "d": "No, the 'array' variable name is forbidden",
            "answer": "b"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let vs = vec![1, 2, 3]; \nfor v in vs {println!(\"{}\", v);} \nprintln!(\"{}\", vs[0]);",
            "a": "Yes, it compiles and it displays 1 2 3 1",
            "b": "Yes, it compiles and it displays 1 2 3",
            "c": "Yes, it compiles and it displays 1 2 3 and generates an index out of bounds error",
            "d": "No",
            "answer": "d"
        },
        {
            "question": "Is the following code a `binding` in Rust and what is the most correct definition of a `binding` ?",
            "code": "let (a, b) = (5, 10);",
            "a": "The example code is a binding, it binds some values to names, the left-side is called a `pattern`.",
            "b": "The example code is a binding, it is used to declare variables.",
            "c": "The example code is not a binding, it binds some values to names, the left-side is called a `pattern`.",
            "d": "The example code is not a binding, it is used to declare variables.",
            "answer": "a"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let x = 50;",
            "a": "No, the type is not specified",
            "b": "No, the `mut` keyword is missing",
            "c": "Yes, the type of x is u8",
            "d": "Yes, the type of x is i32",
            "answer": "d"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let x = \"hello\";",
            "a": "No, the type is not specified",
            "b": "No, the `mut` keyword is missing",
            "c": "Yes, the type of x is &str",
            "d": "Yes, the type of x is String",
            "answer": "c"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let x: u32; \nprintln(\"{}\", x);",
            "a": "No",
            "b": "Yes, the displayed value is undefined because x was not initialized",
            "c": "Yes, the displayed value is 0",
            "d": "Yes, but the code panics during the x variable creation",
            "answer": "a"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let x: u32 = 0; \nlet x = 15; \nprintln(\"{}\", x);",
            "a": "No, it is not possible to declare two variables with the same name",
            "b": "No, the type of the second variable declaration is not specified",
            "c": "Yes, the displayed value is 0",
            "d": "Yes, the displayed value is 15",
            "answer": "d"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let x = 10; \n{\nlet x = 20; \nprintln!(\"{}\", x);\n} \nprintln!(\"{}\", x);",
            "a": "No, the same variable is declared two times",
            "b": "No, it is not allowed to declare a block without condition, function or loop instruction",
            "c": "Yes, the displayed content is 20 and 10",
            "d": "Yes, the displayed content is 20 and 20",
            "answer": "c"
        },
        {
            "question": "Does the following code compile ?",
            "code": "let mut x = 0; \nx = 10; \nlet x = 20; \nx = 30; \nprintln!(\"{}\", x);",
            "a": "No",
            "b": "Yes, it displays 30",
            "c": "Yes, it displays 20",
            "d": "Yes, it displays 10",
            "answer": "a"
        },
        {
            "question": "Does the following code compile ?",
            "code": "fn function(mut x: u32) {\n x += 1; \nprintln(\"{}\", x);\n}\nfn main() {\nlet x = 0;\nfunction(x);\nprintln!(\"{}\", x);\n}",
            "a": "No",
            "b": "Yes, it displays 1 and 1",
            "c": "Yes, it displays 0 and 0",
            "d": "Yes, it displays 1 and 0",
            "answer": "d"
        }
    ]
}
